# Generated by Django 5.2.1 on 2025-07-10 10:43

import django_choices_field.fields
import fakts.enums
import fakts.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('identifier', fakts.fields.IdentifierField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='No name', max_length=1000)),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('website', 'WEBSITE (Value represent WEBSITE)'), ('development', 'DEVELOPMENT (Value represent DEVELOPMENT)'), ('desktop', 'DESKTOP (Value represent DESKTOP A端端)')], choices_enum=fakts.enums.ClientKindChoices, default='development', help_text='The kind of transformation', max_length=11)),
                ('redirect_uris', models.CharField(default=' ', max_length=1000)),
                ('public', models.BooleanField(default=False)),
                ('token', models.CharField(default=uuid.uuid4, max_length=10000, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('requirements_hash', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('staging_kind', django_choices_field.fields.TextChoicesField(choices=[('website', 'WEBSITE (Value represent WEBSITE)'), ('development', 'DEVELOPMENT (Value represent DEVELOPMENT)'), ('desktop', 'DESKTOP (Value represent DESKTOP A端端)')], choices_enum=fakts.enums.ClientKindChoices, default='development', help_text='The kind of staging client', max_length=11)),
                ('staging_manifest', models.JSONField(default=dict)),
                ('staging_logo', models.CharField(max_length=1000, null=True)),
                ('staging_public', models.BooleanField(default=False)),
                ('staging_redirect_uris', models.JSONField(default=list)),
                ('expires_at', models.DateTimeField()),
                ('denied', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='InstanceAlias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='The name of the alias', max_length=1000, null=True)),
                ('host', models.CharField(blank=True, help_text="The host of the alias, if its a ABSOLUTE alias (e.g. 'example.com'). If not set, the alias is relative to the layer's domain.", max_length=1000, null=True)),
                ('port', models.IntegerField(blank=True, help_text='The port of the alias', null=True)),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('absolute', 'ABSOLUTE (Value represent ABSOLUTE)'), ('relative', 'RELATIVE (Value represent RELATIVE)')], choices_enum=fakts.enums.AliasKindChoices, default='relative', help_text="The kind of alias. If relative, the alias is relative to the layer's domain. If absolute, the alias is an absolute URL.", max_length=8)),
                ('ssl', models.BooleanField(default=True, help_text='If the alias is available over SSL or not. If not set, the alias is assumed to be available over SSL.')),
                ('challenge', models.TextField(default='ht', help_text='"A challenge URL to verify the alias on the client. If it returns a 200 OK, the alias is valid. It can additionally return a JSON object with a `challenge\n        key that contains the challenge to be solved by the client.')),
                ('path', models.CharField(blank=True, help_text='The path of the alias,', max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('identifier', fakts.fields.IdentifierField(max_length=1000, unique=True)),
                ('description', models.TextField(blank=True, default='No description available', null=True)),
                ('dns_probe', models.TextField(blank=True, default='No probe available', null=True)),
                ('get_probe', models.TextField(blank=True, default='No probe available', null=True)),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('public', 'WEB (Value represent WEB)'), ('tailscale', 'TAILSCALE (Value represent TAILSCALE)'), ('vpn', 'VPN (Value represent VPN)'), ('docker', 'DOCKER (Value represent DOCKER)')], choices_enum=fakts.enums.LayerKindChoices, default='public', help_text='The kind of layer', max_length=9)),
            ],
        ),
        migrations.CreateModel(
            name='RedeemToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(default=uuid.uuid4, max_length=1000, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', fakts.fields.VersionField(max_length=1000)),
                ('name', models.CharField(max_length=1000)),
                ('scopes', models.JSONField(default=list)),
                ('requirements', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('identifier', fakts.fields.IdentifierField(max_length=1000)),
                ('description', models.TextField(blank=True, default='No description available', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='The identifier of the instance. This is used to identify the instance in the configuration.', max_length=1000, unique=True)),
                ('template', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceInstanceMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=1000)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('optional', models.BooleanField(default=False)),
            ],
        ),
    ]
