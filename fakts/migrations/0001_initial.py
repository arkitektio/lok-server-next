# Generated by Django 5.2.1 on 2025-06-25 18:25

import django.db.models.deletion
import django_choices_field.fields
import fakts.enums
import fakts.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('authapp', '0003_alter_oauth2token_access_token_and_more'),
        ('karakter', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('identifier', fakts.fields.IdentifierField(max_length=1000)),
                ('logo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='No name', max_length=1000)),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('website', 'WEBSITE (Value represent WEBSITE)'), ('development', 'DEVELOPMENT (Value represent DEVELOPMENT)'), ('desktop', 'DESKTOP (Value represent DESKTOP A端端)')], choices_enum=fakts.enums.ClientKindChoices, default='development', help_text='The kind of transformation', max_length=11)),
                ('redirect_uris', models.CharField(default=' ', max_length=1000)),
                ('public', models.BooleanField(default=False)),
                ('token', models.CharField(default=uuid.uuid4, max_length=10000, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('requirements_hash', models.CharField(max_length=1000)),
                ('logo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore')),
                ('oauth2_client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client', to='authapp.oauth2client')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_clients', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clients', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('identifier', fakts.fields.IdentifierField(max_length=1000, unique=True)),
                ('description', models.TextField(blank=True, default='No description available', null=True)),
                ('dns_probe', models.TextField(blank=True, default='No probe available', null=True)),
                ('get_probe', models.TextField(blank=True, default='No probe available', null=True)),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('public', 'WEB (Value represent WEB)'), ('tailscale', 'TAILSCALE (Value represent TAILSCALE)'), ('vpn', 'VPN (Value represent VPN)'), ('docker', 'DOCKER (Value represent DOCKER)')], choices_enum=fakts.enums.LayerKindChoices, default='public', help_text='The kind of layer', max_length=9)),
                ('logo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('staging_kind', django_choices_field.fields.TextChoicesField(choices=[('website', 'WEBSITE (Value represent WEBSITE)'), ('development', 'DEVELOPMENT (Value represent DEVELOPMENT)'), ('desktop', 'DESKTOP (Value represent DESKTOP A端端)')], choices_enum=fakts.enums.ClientKindChoices, default='development', help_text='The kind of staging client', max_length=11)),
                ('staging_manifest', models.JSONField(default=dict)),
                ('staging_logo', models.CharField(max_length=1000, null=True)),
                ('staging_public', models.BooleanField(default=False)),
                ('staging_redirect_uris', models.JSONField(default=list)),
                ('expires_at', models.DateTimeField()),
                ('denied', models.BooleanField(default=False)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='fakts.client')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('supported_layers', models.ManyToManyField(related_name='staging_device_codes', to='fakts.layer')),
            ],
        ),
        migrations.CreateModel(
            name='RedeemToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(default=uuid.uuid4, max_length=1000, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(null=True)),
                ('client', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='redeemed_client', to='fakts.client')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_tokens', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', fakts.fields.VersionField(max_length=1000)),
                ('name', models.CharField(max_length=1000)),
                ('scopes', models.JSONField(default=list)),
                ('requirements', models.JSONField(default=dict)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='releases', to='fakts.app')),
                ('logo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore')),
            ],
        ),
        migrations.AddField(
            model_name='client',
            name='release',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clients', to='fakts.release'),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('identifier', fakts.fields.IdentifierField(max_length=1000)),
                ('description', models.TextField(blank=True, default='No description available', null=True)),
                ('logo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='The identifier of the instance. This is used to identify the instance in the configuration.', max_length=1000, unique=True)),
                ('template', models.TextField()),
                ('allowed_groups', models.ManyToManyField(related_name='allowed_instances', to='auth.group')),
                ('allowed_users', models.ManyToManyField(related_name='allowed_instances', to=settings.AUTH_USER_MODEL)),
                ('denied_groups', models.ManyToManyField(related_name='denied_instances', to='auth.group')),
                ('denied_users', models.ManyToManyField(related_name='denied_instances', to=settings.AUTH_USER_MODEL)),
                ('logo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='fakts.service')),
                ('steward', models.ForeignKey(blank=True, help_text='The user who is responsible for this instance. If null the admin is stewared by admin user.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stewarded_instances', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InstanceAlias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='The name of the alias', max_length=1000, null=True)),
                ('host', models.CharField(blank=True, help_text="The host of the alias, if its a ABSOLUTE alias (e.g. 'example.com'). If not set, the alias is relative to the layer's domain.", max_length=1000, null=True)),
                ('port', models.IntegerField(blank=True, help_text='The port of the alias', null=True)),
                ('path', models.CharField(blank=True, help_text='The path of the alias,', max_length=1000, null=True)),
                ('layer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aliases', to='fakts.layer')),
                ('instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aliases', to='fakts.serviceinstance')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceInstanceMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=1000)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('optional', models.BooleanField(default=False)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='fakts.client')),
                ('instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='fakts.serviceinstance')),
            ],
        ),
        migrations.AddConstraint(
            model_name='release',
            constraint=models.UniqueConstraint(fields=('app', 'version'), name='Only one per app and version'),
        ),
        migrations.AddConstraint(
            model_name='client',
            constraint=models.UniqueConstraint(fields=('release', 'user'), name='Only one per releast, tenankt and kind'),
        ),
        migrations.AddConstraint(
            model_name='instancealias',
            constraint=models.UniqueConstraint(fields=('layer', 'instance'), name='Only one alias per instance and name'),
        ),
        migrations.AddConstraint(
            model_name='serviceinstancemapping',
            constraint=models.UniqueConstraint(fields=('key', 'client'), name='Only one instance per key and composition'),
        ),
    ]
