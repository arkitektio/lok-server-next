# Generated by Django 5.2.1 on 2025-05-09 07:11

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('authapp', '0002_initial'),
        ('fakts', '0001_initial'),
        ('karakter', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='app',
            name='logo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore'),
        ),
        migrations.AddField(
            model_name='client',
            name='logo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore'),
        ),
        migrations.AddField(
            model_name='client',
            name='oauth2_client',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client', to='authapp.oauth2client'),
        ),
        migrations.AddField(
            model_name='client',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_clients', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='client',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clients', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='devicecode',
            name='client',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='fakts.client'),
        ),
        migrations.AddField(
            model_name='devicecode',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='layer',
            name='logo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore'),
        ),
        migrations.AddField(
            model_name='devicecode',
            name='supported_layers',
            field=models.ManyToManyField(related_name='staging_device_codes', to='fakts.layer'),
        ),
        migrations.AddField(
            model_name='redeemtoken',
            name='client',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='redeemed_client', to='fakts.client'),
        ),
        migrations.AddField(
            model_name='redeemtoken',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_tokens', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='release',
            name='app',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='releases', to='fakts.app'),
        ),
        migrations.AddField(
            model_name='release',
            name='logo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore'),
        ),
        migrations.AddField(
            model_name='client',
            name='release',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clients', to='fakts.release'),
        ),
        migrations.AddField(
            model_name='service',
            name='logo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore'),
        ),
        migrations.AddField(
            model_name='serviceinstance',
            name='allowed_groups',
            field=models.ManyToManyField(related_name='allowed_instances', to='auth.group'),
        ),
        migrations.AddField(
            model_name='serviceinstance',
            name='allowed_users',
            field=models.ManyToManyField(related_name='allowed_instances', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='serviceinstance',
            name='denied_groups',
            field=models.ManyToManyField(related_name='denied_instances', to='auth.group'),
        ),
        migrations.AddField(
            model_name='serviceinstance',
            name='denied_users',
            field=models.ManyToManyField(related_name='denied_instances', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='serviceinstance',
            name='layer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='fakts.layer'),
        ),
        migrations.AddField(
            model_name='serviceinstance',
            name='logo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karakter.mediastore'),
        ),
        migrations.AddField(
            model_name='serviceinstance',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='fakts.service'),
        ),
        migrations.AddField(
            model_name='instanceconfig',
            name='instance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configs', to='fakts.serviceinstance'),
        ),
        migrations.AddField(
            model_name='serviceinstancemapping',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='fakts.client'),
        ),
        migrations.AddField(
            model_name='serviceinstancemapping',
            name='instance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='fakts.serviceinstance'),
        ),
        migrations.AddField(
            model_name='userdefinedserviceinstance',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userdefinedserviceinstance',
            name='instance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_definitions', to='fakts.serviceinstance'),
        ),
        migrations.AddConstraint(
            model_name='release',
            constraint=models.UniqueConstraint(fields=('app', 'version'), name='Only one per app and version'),
        ),
        migrations.AddConstraint(
            model_name='client',
            constraint=models.UniqueConstraint(fields=('release', 'user'), name='Only one per releast, tenankt and kind'),
        ),
        migrations.AddConstraint(
            model_name='serviceinstance',
            constraint=models.UniqueConstraint(fields=('backend', 'identifier'), name='Only one instance per backend and identifier'),
        ),
        migrations.AddConstraint(
            model_name='instanceconfig',
            constraint=models.UniqueConstraint(fields=('instance', 'key'), name='Only one config per instance and key'),
        ),
        migrations.AddConstraint(
            model_name='serviceinstancemapping',
            constraint=models.UniqueConstraint(fields=('key', 'client'), name='Only one instance per key and composition'),
        ),
    ]
